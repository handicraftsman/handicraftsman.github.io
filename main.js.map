{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/gogling-project/gogling-project.component.html","webpack:///./src/app/gogling-project/gogling-project.component.scss","webpack:///./src/app/gogling-project/gogling-project.component.ts","webpack:///./src/app/index-page/index-page.component.html","webpack:///./src/app/index-page/index-page.component.scss","webpack:///./src/app/index-page/index-page.component.ts","webpack:///./src/app/irc-bots-project/irc-bots-project.component.html","webpack:///./src/app/irc-bots-project/irc-bots-project.component.scss","webpack:///./src/app/irc-bots-project/irc-bots-project.component.ts","webpack:///./src/app/loggers-project/loggers-project.component.html","webpack:///./src/app/loggers-project/loggers-project.component.scss","webpack:///./src/app/loggers-project/loggers-project.component.ts","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.scss","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/not-found-page/not-found-page.component.html","webpack:///./src/app/not-found-page/not-found-page.component.scss","webpack:///./src/app/not-found-page/not-found-page.component.ts","webpack:///./src/app/prism.service.ts","webpack:///./src/app/tiny2-project/tiny2-project.component.html","webpack:///./src/app/tiny2-project/tiny2-project.component.scss","webpack:///./src/app/tiny2-project/tiny2-project.component.ts","webpack:///./src/app/utilities-project/utilities-project.component.html","webpack:///./src/app/utilities-project/utilities-project.component.scss","webpack:///./src/app/utilities-project/utilities-project.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IndexPageComponent } from './index-page/index-page.component';\n\nimport { GoglingProjectComponent } from './gogling-project/gogling-project.component';\nimport { LoggersProjectComponent } from './loggers-project/loggers-project.component';\nimport { IrcBotsProjectComponent } from './irc-bots-project/irc-bots-project.component';\nimport { Tiny2ProjectComponent } from './tiny2-project/tiny2-project.component';\nimport { UtilitiesProjectComponent } from './utilities-project/utilities-project.component';\n\nimport { NotFoundPageComponent } from './not-found-page/not-found-page.component';\n\nconst routes: Routes = [\n  // /\n  { path: '', pathMatch: 'full', component: IndexPageComponent },\n\n  // /projects/gogling\n  { path: 'projects/gogling', pathMatch: 'full', component: GoglingProjectComponent },\n\n  // /projects/loggers\n  { path: 'projects/loggers', pathMatch: 'full', component: LoggersProjectComponent },\n\n  // /projects/irc-bots\n  { path: 'projects/irc-bots', pathMatch: 'full', component: IrcBotsProjectComponent },\n\n  // /projects/tiny2\n  { path: 'projects/tiny2', pathMatch: 'full', component: Tiny2ProjectComponent },\n\n  // /projects/utilities\n  { path: 'projects/utilities', pathMatch: 'full', component: UtilitiesProjectComponent },\n\n  // 404\n  { path: '**', component: NotFoundPageComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<site-navbar></site-navbar>\\n\\n<router-outlet></router-outlet>\\n\\n<div style=\\\"text-align: center\\\">\\n  <span class=\\\"mat-caption\\\">\\n    Nickolay Ilyushin (handicraftsman) <span style=\\\"display:inline-block; transform: rotate(180deg);\\\">&copy;</span> 2018\\n  </span>\\n</div>\"","module.exports = \"\"","import { Component } from '@angular/core';\n\nimport { NavbarComponent } from './navbar/navbar.component';\n\n@Component({\n  selector: 'site-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'site';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { IndexPageComponent } from './index-page/index-page.component';\n\nimport { GoglingProjectComponent } from './gogling-project/gogling-project.component';\nimport { LoggersProjectComponent } from './loggers-project/loggers-project.component';\nimport { IrcBotsProjectComponent } from './irc-bots-project/irc-bots-project.component';\nimport { Tiny2ProjectComponent } from './tiny2-project/tiny2-project.component';\nimport { UtilitiesProjectComponent } from './utilities-project/utilities-project.component';\n\nimport { NotFoundPageComponent } from './not-found-page/not-found-page.component';\n\nimport { NavbarComponent } from './navbar/navbar.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\n    IndexPageComponent,\n\n    GoglingProjectComponent,\n    LoggersProjectComponent,\n    IrcBotsProjectComponent,\n    Tiny2ProjectComponent,\n    UtilitiesProjectComponent,\n\n    NotFoundPageComponent,\n\n    NavbarComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatListModule,\n    MatSidenavModule,\n    MatToolbarModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    Gogling\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      Gogling is an application server with Lua API I wrote back in 2016\\n      and remade in August 2018. Simple example:\\n    </p>\\n\\n    <pre><code class=\\\"language-lua\\\">{{ example1 }}</code></pre>\\n\\n    <p>\\n      This will reply to your requests to / with <code>Hello, World!</code>.\\n    </p>\\n    <p>\\n      Current version is a full rewrite, but you still can access\\n      old one at <code>development</code> and <code>updpack-into-package</code>\\n      branches\\n    </p>\\n    <p>\\n      Gogling supports importing prebuilt (as plugins) Golang's standard library.\\n      To build it, you must have ruby, bash and go.\\n    </p>\\n\\n    <pre><code class=\\\"language-bash\\\">{{ example2 }}</code></pre>\\n\\n    <p>\\n      Now you can find built standard library as a set of plugins.\\n      (warning: they take ~860 MB on your disk so you shouldn't push all of them to the server)\\n    </p>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/gogling\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, AfterViewChecked } from '@angular/core';\n\nimport { PrismService } from '../prism.service';\n\n@Component({\n  selector: 'site-gogling-project',\n  templateUrl: './gogling-project.component.html',\n  styleUrls: ['./gogling-project.component.scss']\n})\nexport class GoglingProjectComponent implements OnInit, AfterViewChecked {\n\n  highlighted: boolean = false;\n\n  example1: string =\n`-- importing fmt package\nlocal fmt = gogling.U.import('fmt')\n\n-- adding a wrapped function as a handler for / route\ngogling.I.Router:HandleFunc('/', gogling.U.wrap(function(session)\n  -- replying with 'Hello, World!'\n  fmt.Fprintln(session.writer, 'Hello, World!')\nend))`;\n\n  example2: string =\n`$ cd ~/path/to/gogling\n# This will generate Gopher-Lua bindings to Golang's standard library\n$ ruby ./get-gostdlib.rb\n# This will build generated bindgings so you could load them as plugins\n$ bash ./build-gostdlib.sh`;\n\n  constructor(private prismService: PrismService) {}\n  ngOnInit() {}\n\n  ngAfterViewChecked() {\n    if (!this.highlighted) {\n      this.prismService.highlightAll();\n      this.highlighted = true;\n    }\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-content style=\\\"margin-bottom: 0\\\">\\n    <span class=\\\"mat-display-1\\\" style=\\\"margin-bottom: 16px\\\">About</span><br/>\\n\\n    <p>\\n      Hello. I am Nickolay Ilyushin, yet another developer.\\n    </p>\\n    <p>\\n      I don't have much to say about myself.\\n    </p>\\n    <p>\\n      You can find links to the corresponding project pages below and at navbar.\\n    </p>\\n\\n    <span class=\\\"mat-display-1\\\" style=\\\"margin-bottom: 16px\\\">Contact</span>\\n\\n    <mat-list>\\n      <mat-list-item class=\\\"site-contact-item\\\">\\n        Email:&nbsp;<a href=\\\"mailto:nickolay.ilyushin@gmail.com\\\">nickolay.ilyushin@gmail.com</a>\\n      </mat-list-item>\\n      <mat-list-item class=\\\"site-contact-item\\\">\\n        <span matLine>Email (secondary):&nbsp;<a href=\\\"mailto:nickolay02@inbox.ru\\\">nickolay02@inbox.ru</a></span>\\n        <span matLine>Prefer the first one as an email service provider of the second one (mail.ru) is banned here in Ukraine.</span>\\n      </mat-list-item>\\n      <mat-list-item class=\\\"site-contact-item\\\">\\n        Discord: handicraftsman_#9800\\n      </mat-list-item>\\n      <mat-list-item class=\\\"site-contact-item\\\">\\n        IRC: handicraftsman at freenode and rusnet.\\n      </mat-list-item>\\n      <mat-list-item class=\\\"site-contact-item\\\">\\n        XMPP: handicraftsman@xmpp.thehellverse.tk\\n      </mat-list-item> \\n    </mat-list>\\n\\n    <span class=\\\"mat-display-1\\\">Projects</span>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"/projects/gogling\\\">\\n      Gogling\\n    </button>\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"/projects/loggers\\\">\\n      Loggers\\n    </button>\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"/projects/irc-bots\\\">\\n      IRC Bots\\n    </button>\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"/projects/tiny2\\\">\\n      tiny2\\n    </button>\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"/projects/utilities\\\">\\n      Utilities/Other\\n    </button>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'site-index-page',\n  templateUrl: './index-page.component.html',\n  styleUrls: ['./index-page.component.scss']\n})\nexport class IndexPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    IRC Bots\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      I've written multiple IRC bots in various languages. My latest\\n      (and one of most stable) bot is ParticleBot2.\\n    </p>\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    ParticleBot2\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      ParticleBot2 is written in C++ and supports serving channels in multiple\\n      IRC networks and extending using C++ plugins.\\n    </p>\\n\\n    <p>\\n      ParticleBot2 depends on Guosh, ParticleDI, ParticleINI, SQLite3 and CURL.\\n    </p>\\n\\n    <p>\\n      Optional dependencies include libxml++ and jsoncpp.\\n    </p>\\n\\n    <p>\\n      Building:\\n    </p>\\n\\n    <pre><code class=\\\"language-bash\\\">{{ pb2build }}</code></pre>\\n    \\n    <p>\\n      Example config (which loads all plugins and adds corresponding groups)\\n    </p>\\n\\n    <pre><code class=\\\"language-ini\\\">{{ pb2config }}</code></pre>\\n\\n    <p>\\n      Starting:\\n    </p>\\n\\n    <pre><code class=\\\"language-bash\\\">{{ pb2starting }}</code></pre>\\n\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particlebot2\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    Other bots\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      I have written some other bots. These may be unstable or partially unfinished.\\n      This is the full list of them:\\n    </p>\\n\\n    <mat-list>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/particlebot\\\">ParticleBot</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/protonbot\\\">ProtonBot</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/photonbot\\\">PhotonBot</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/particlebot\\\">ParticleBot</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/wuon\\\">wuon</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/gluonbot\\\">gluonbot</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/tinyirc\\\">tinyirc</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <a href=\\\"https://github.com/handicraftsman/electronbot\\\">ElectronBot</a>        \\n      </mat-list-item>\\n    </mat-list>\\n  </mat-card-content>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, AfterViewChecked } from '@angular/core';\n\nimport { PrismService } from '../prism.service';\n\n@Component({\n  selector: 'site-irc-bots-project',\n  templateUrl: './irc-bots-project.component.html',\n  styleUrls: ['./irc-bots-project.component.scss']\n})\nexport class IrcBotsProjectComponent implements OnInit, AfterViewChecked {\n\n  highlighted: boolean = false;\n\n  pb2build: string =\n`$ git clone https://github.com/handicraftsman/particlebot2\n$ cd particlebot2\n$ mkdir build && cd build\n$ cmake .. # -DCMAKE_BUILD_TYPE=(Release or Debug), depending on what you need\n           # May need to prepend CC=gcc-8 CXX=g++-8 on Ubuntu 18.04 as this uses\n           # some C++17 features\n$ make\n`\n\n  pb2config: string =\n`[general]\nprefix = !\n\n[server/freenode]\naddr = irc.freenode.net/6667\naddr = chat.freenode.net/6667\n\nnick = YourAwesomeNickname\nuser = YourAwesomeUsername\npass = YourAwesomePassword\nrnam = Your amazing realname\n\njoin = \"##your-amazing-channel\"\njoin = \"##foo-bar-baz\"\n\n[plugin/chanop]\n[plugin/fun]\n[plugin/titler]\n[plugin/calcs]\n[plugin/urban]\n[plugin/quotes]\n\n[group/chanop]\nchanop = kick\nchanop = remove\nchanop = kban\nchanop = rban\nchanop = ban\nchanop = quiet\nchanop = op\nchanop = hop\nchanop = voice\n\n[group/fun]\nfun = poke\nfun = cookie\n\n[group/quotes]\nquotes = quote\nquotes = add-quote\nquotes = del-quote`\n\n  pb2starting: string =\n`$ ./particlebot2 -c /path/to/config.ini -l debug\n# Messages below given level will not be printed\n# Level for all IRC messages is io/irc\n# See all levels by typing\n$ ./particlebot2 --help\n`\n\n  constructor(private prismService: PrismService) {}\n  ngOnInit() {}\n\n  ngAfterViewChecked() {\n    if (!this.highlighted) {\n      this.prismService.highlightAll();\n      this.highlighted = true;\n    }\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    Loggers\\n  </mat-card-title>\\n  <mat-card-content>\\n    I have written some loggers for various languages.\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\" id=\\\"logger-guosh\\\">\\n  <mat-card-title>\\n    Guosh\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      Guosh is a logger for C and C++, written in C++.\\n    </p>\\n\\n    <p>\\n      C++ example:\\n    </p>\\n    <pre><code class=\\\"language-cpp\\\">{{ guoshexample1 }}</code></pre>\\n    \\n    <p>\\n      C example:\\n    </p>\\n    <pre><code class=\\\"language-c\\\">{{ guoshexample2 }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/guosh\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\" id=\\\"logger-tiny-log\\\">\\n  <mat-card-title>\\n    tiny-log\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      tiny-log is a logger for C.\\n    </p>\\n\\n    <p>\\n      Example:\\n    </p>\\n    <pre><code class=\\\"language-c\\\">{{ tinylogexample }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/tiny-log\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\" id=\\\"logger-particlelog\\\">\\n  <mat-card-title>\\n    ParticleLog\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      ParticleLog is a logger for Ruby.\\n    </p>\\n\\n    <p>\\n      Example:\\n    </p>\\n    <pre><code class=\\\"language-ruby\\\">{{ particlelogexample }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particlelog\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\" id=\\\"logger-gluon\\\">\\n  <mat-card-title>\\n    Gluon\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      Gluon is a logger for crystal.\\n    </p>\\n\\n    <p>\\n      Example:\\n    </p>\\n    <pre><code class=\\\"language-crystal\\\">{{ gluonexample }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/gluon\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\" id=\\\"logger-positron\\\">\\n  <mat-card-title>\\n    Positron\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      Positron is a logger for Python.\\n    </p>\\n\\n    <p>\\n      Example:\\n    </p>\\n    <pre><code class=\\\"language-python\\\">{{ positronexample }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/positron\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, AfterViewChecked } from '@angular/core';\n\nimport { PrismService } from '../prism.service';\n\n@Component({\n  selector: 'site-loggers-project',\n  templateUrl: './loggers-project.component.html',\n  styleUrls: ['./loggers-project.component.scss']\n})\nexport class LoggersProjectComponent implements OnInit, AfterViewChecked {\n\n  highlighted: boolean = false;\n\n  guoshexample1: string =\n`#include <guosh.hpp>\n\nint main() {\n  Guosh::Logger::main_level = Guosh::LogLevel::DEBUG;\n  Guosh::Logger log;\n  log.enable_file_logging(\"./\", \"test-c++\");\n\n  log.write(\"write()\");\n  log(\"operator()\");\n  log.debug(\"debug\");\n  log.io(\"io\");\n  log.info(\"info\");\n  log.warning(\"warning\");\n  log.error(\"error\");\n  log.important(\"important\");\n  log.critical(\"critical %s bar\", \"foo\");\n}`;\n\n  guoshexample2: string =\n`#include <guosh.h>\n\nint main() {\n  guosh_set_main_level(GuoshLogLevel_DEBUG);\n  GuoshLogger* log = guosh_logger_new(\"log\", GuoshLogLevel_INFO);\n  guosh_logger_enable_file_logging(log, \"./\", \"test-c\");\n\n  guosh_logger_debug(log, \"debug\");\n  guosh_logger_io(log, \"io\");\n  guosh_logger_info(log, \"info\");\n  guosh_logger_warning(log, \"warning\");\n  guosh_logger_error(log, \"error\");\n  guosh_logger_important(log, \"important\");\n  guosh_logger_critical(log, \"critical %s bar\", \"foo\");\n  \n  guosh_logger_destroy(log);\n  return 0;\n}`;\n\n  tinylogexample: string =\n`#include <tiny-log.h>\n\nint main() {\n  tl_log_level = TLLevel_DEBUG;\n  \n  char* l = \"main\";\n  tl_write(l, \"tl_write()\");\n  tl_lwrite(TLLevel_INFO, l, \"tl_lwrite()\");\n  \n  tl_debug(l, \"tl_debug()\");\n  tl_io(l, \"tl_io()\");\n  tl_info(l, \"tl_info()\");\n  tl_warning(l, \"tl_warning()\");\n  tl_error(l, \"tl_error()\");\n  tl_important(l, \"tl_important()\");\n  tl_critical(l, \"tl_critical()\");\n  \n  tl_write(l, \"I also support %s\", \"formatted printing\");\n  return 0;\n}`;\n\n  particlelogexample: string =\n`require 'particlelog'\n\nlog = ParticleLog.new('main', ParticleLog::DEBUG)\nlog.write('Hello!')\nlog.debug('debug')\nlog.info('info')\nlog.warning('warning')\nlog.error('error')\nlog.critical('critical')\n`;\n\n  gluonexample: string =\n`require \"gluon\"\n\nGluon::Logger.main_log_level = Gluon::LogLevel::DEBUG\nl = Gluon::Logger.new(Gluon::LogLevel::DEBUG)\nl.write(\"Hello!\")\nl.debug(\"debug\")\nl.info(\"info\")\nl.warning(\"warning\")\nl.error(\"error\")\nl.critical(\"critical\")`;\n\n  positronexample: string =\n`import positron\n\npositron.main_level = positron.LogLevel.DEBUG\nlog = positron.Logger('log', positron.LogLevel.IMPORTANT)\nlog.enable_file_logging()\nlog.debug('debug')\nlog.io('io')\nlog.info('info')\nlog.warning('warning')\nlog.error('error')\nlog.important('important')\nlog.critical('critical')\nlog.iochars = 'MSG'\nlog.io('msg')`;\n\n  constructor(private prismService: PrismService) {}\n  ngOnInit() {}\n\n  ngAfterViewChecked() {\n    if (!this.highlighted) {\n      this.prismService.highlightAll();\n      this.highlighted = true;\n    }\n  }\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"mat-elevation-z2 hide-on-small\\\">\\n  <button mat-button routerLink=\\\"/\\\">\\n    <img src=\\\"/favicon.png\\\" height=\\\"32\\\" style=\\\"margin-right: 4px; margin-bottom: 2px\\\">\\n    Home\\n  </button>\\n  <button *ngFor=\\\"let link of links\\\" mat-button [routerLink]=\\\"link[1]\\\">\\n    {{ link[0] }}\\n  </button>\\n</mat-toolbar>\\n\\n<mat-sidenav-container style=\\\"position: static\\\" clas class=\\\"show-on-small\\\">\\n  <mat-sidenav #sidenav mode=\\\"over\\\" class=\\\"sidenav mat-elevation-z2 show-on-small\\\">\\n    <button mat-button routerLink=\\\"/\\\" class=\\\"sidenav-btn\\\">\\n      <img src=\\\"/favicon.png\\\" height=\\\"32\\\" style=\\\"margin-right: 4px; margin-bottom: 2px\\\">\\n      Home\\n    </button><br/>\\n    <button *ngFor=\\\"let link of links\\\" mat-button [routerLink]=\\\"link[1]\\\" class=\\\"sidenav-btn\\\">\\n      {{ link[0] }}\\n    </button>\\n  </mat-sidenav>\\n\\n  <button\\n    mat-fab\\n    class=\\\"show-on-small\\\"\\n    style=\\\"z-index: 1000; position: fixed; bottom: 16px; right: 16px; color: white\\\"\\n    (click)=\\\"sidenav.toggle()\\\"\\n  >\\n    <mat-icon aria-label=\\\"Show Sidebar\\\">menu</mat-icon>\\n  </button>\\n</mat-sidenav-container>\"","module.exports = \".sidenav {\\n  min-width: 78px;\\n  width: 30vw; }\\n\\n.sidenav-btn {\\n  width: 92%;\\n  margin: 4px;\\n  text-align: left; }\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'site-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n  links: string[][] = [\n    [ 'Gogling', '/projects/gogling' ],\n    [ 'Loggers', '/projects/loggers' ],\n    [ 'IRC Bots', '/projects/irc-bots' ],\n    [ 'tiny2', '/projects/tiny2' ],\n    [ 'Utilities/Other', '/projects/utilities' ],\n  ];\n\n  constructor() {}\n  ngOnInit() {}\n}\n","module.exports = \"<div style=\\\"margin-top: 30vh; text-align: center\\\">\\n  <span class=\\\"mat-display-1\\\">404</span><br/>\\n  <span>Sorry, but I cannot find this page</span>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'site-not-found-page',\n  templateUrl: './not-found-page.component.html',\n  styleUrls: ['./not-found-page.component.scss']\n})\nexport class NotFoundPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport 'clipboard';\n\nimport 'prismjs';\nimport 'prismjs/plugins/toolbar/prism-toolbar';\nimport 'prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard';\n\n// Import language support for languages you need\nimport 'prismjs/components/prism-lua';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-cpp';\nimport 'prismjs/components/prism-ruby';\nimport 'prismjs/components/prism-crystal';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-ini';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-clojure';\n\ndeclare var Prism: any;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PrismService {\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  highlightAll() {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll();\n    }\n  }\n}","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    tiny2-object\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      tiny2-object is a partial OOP implementation in C.\\n    </p>\\n\\n    <p>\\n      It supports method tables, virtual method tables, and inheritance.\\n    </p>\\n\\n    <p>\\n      It DOES NOT support such features as data encapsulation\\n      (private/protected fields; but you can create a class with a pointer to a\\n      private object) and multiple inheritance.\\n    </p>\\n\\n    <p>\\n      Greeter class:\\n    </p>\\n\\n    <pre><code class=\\\"language-c\\\">{{ greeterc }}</code></pre>\\n\\n    <p>\\n      TitleGreeter class:\\n    </p>\\n\\n    <pre><code class=\\\"language-c\\\">{{ titlegreeterc }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/tiny2-object\\\">\\n      GitHub\\n    </a>  \\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    tiny2-object\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      tiny2-containers is a container implementation for tiny2-object.\\n    </p>\\n\\n    <p>\\n      It has string wrappers (for storing strigs) lists, vectors, queues and maps.\\n    </p>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/tiny2-containers\\\">\\n      GitHub\\n    </a>  \\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit,  AfterViewChecked} from '@angular/core';\n\nimport { PrismService } from '../prism.service';\n\n@Component({\n  selector: 'site-tiny2-project',\n  templateUrl: './tiny2-project.component.html',\n  styleUrls: ['./tiny2-project.component.scss']\n})\nexport class Tiny2ProjectComponent implements OnInit, AfterViewChecked {\n\n  highlighted: boolean = false;\n\n  constructor(private prismService: PrismService) {}\n  ngOnInit() {}\n\n  greeterc: string =\n`/*\n * test-greeter.h\n */\n\n// Include guard\n#pragma once\n\n// Inclue tiny2-object\n#include <tiny2-object.h>\n\n// Declare a class so you could define its methods.\n$class_decl(Greeter)\n\n// Define method signatures. (constructor, vtable initializer, greet and virtual greet)\ntypedef Greeter* (*GreeterConstructor)(Greeter* self);\ntypedef void (*GreeterInitVTable)(GreeterVTable* v);\ntypedef void (*GreeterGreet)(Greeter* self, const char* who);\ntypedef void (*GreeterVGreet)(Greeter* self, const char* who);\n\n// Define the class itself. In this example it inherits from TObject\n// which can be accessed by casting to it or by accessing self->_parent\n// member.\n$class(Greeter, TObject, _parent)\n$class_end(Greeter)\n\n// Define methods.\n$mtable(Greeter)\n  $mtable_method(GreeterGreet, greet)\n$mtable_end(Greeter)\n\n// Define virtual methods.\n$vtable(Greeter, TObject)\n  $vtable_method(GreeterVGreet, vgreet)\n$vtable_end(Greeter)\n\n/*\n * test-greeter.c\n */\n\n// Include the class definitio\n#include \"test-greeter.h\"\n\n// We'll need stdio.h for printf.\n#include <stdio.h>\n\n// Declare method implementations.\nstatic Greeter* greeter_constructor(Greeter* self);\nstatic void greeter_destructor(Greeter* self);\nstatic void greeter_init_vtable(GreeterVTable* v);\nstatic void greeter_greet(Greeter* self, const char* who);\nstatic void greeter_vgreet(Greeter* self, const char* who);\n\n// Declare method implementations as members of the Greeter class.\n$mtable_define(Greeter, greeter_constructor, greeter_destructor, greeter_init_vtable)\n  $mtable_define_method(GreeterGreet, greet, greeter_greet)\n$mtable_define_end(Greeter)\n\n// Do this with virtual method implementations. \n$vtable_define(Greeter)\n  $vtable_define_method(GreeterVGreet, vgreet)\n$vtable_define_end(Greeter)\n\nstatic Greeter* greeter_constructor(Greeter* self) {\n  // Initialize parent.\n  $init(TObject, self);\n  // Setup current instance and classes vtable.\n  $setup(Greeter, self, greeter_destructor);\n  // Return initialized instance so it could be used.\n  return self;\n}\n\nstatic void greeter_init_vtable(GreeterVTable* v) {\n  // Initialize this and parent vtable. \n  $vtable_init(v, Greeter, TObject);\n  // Declare vgreet as a method of this vtable.\n  $vtable_set(v, Greeter, GreeterVGreet, vgreet, greeter_vgreet);\n}\n\nstatic void greeter_destructor(Greeter* self) {\n  // Call parent destructor.\n  $destroy_parent(TObject, self);\n}\n\nstatic void greeter_greet(Greeter* self, const char* who) {\n  printf(\"Hello, %s\\n\", who);\n}\n\nstatic void greeter_vgreet(Greeter* self, const char* who) {\n  printf(\"Hello, %s\\n\", who);\n}\n`;\n\n  titlegreeterc: string =\n`/*\n * test-titlegreeter.h\n */\n\n#pragma once\n\n#include <tiny2-object.h>\n#include \"test-greeter.h\"\n\n$class_decl(TitleGreeter)\n\ntypedef TitleGreeter* (*TitleGreeterConstructor)(TitleGreeter*, const char*);\ntypedef void (*TitleGreeterInitVTable)(TitleGreeterVTable* v);\n\n$class(TitleGreeter, Greeter, _parent)\n  $class_property(const char*, title)\n$class_end(TitleGreeter)\n\n$mtable(TitleGreeter)\n$mtable_end(TitleGreeter)\n\n$vtable(TitleGreeter, Greeter)\n$vtable_end(TitleGreeter)\n\n/*\n * test-titlegreeter.c\n */\n\n#include \"test-titlegreeter.h\"\n\n#include <stdio.h>\n\nstatic TitleGreeter* titlegreeter_constructor(TitleGreeter* self, const char* title);\nstatic void titlegreeter_destructor(TitleGreeter* self);\nstatic void titlegreeter_init_vtable(TitleGreeterVTable* v);\nstatic void titlegreeter_vgreet(TitleGreeter* self, const char* who);\n\n$mtable_define(TitleGreeter, titlegreeter_constructor, titlegreeter_destructor, titlegreeter_init_vtable)\n$mtable_define_end(TitleGreeter)\n\n$vtable_define(TitleGreeter)\n$vtable_define_end(TitleGreeter)\n\nstatic TitleGreeter* titlegreeter_constructor(TitleGreeter* self, const char* title) {\n  $init(Greeter, self);\n  $setup(TitleGreeter, self, titlegreeter_destructor);\n  self->title = title;\n  return self;\n}\n\nstatic void titlegreeter_destructor(TitleGreeter* self) {\n  $destroy_parent(Greeter, self);\n}\n\nstatic void titlegreeter_init_vtable(TitleGreeterVTable* v) {\n  $vtable_init(v, TitleGreeter, Greeter);\n  $vtable_setp(v, TitleGreeter, Greeter, GreeterVGreet, vgreet, titlegreeter_vgreet);\n}\n\nstatic void titlegreeter_vgreet(TitleGreeter* self, const char* who) {\n  printf(\"Hello, %s%s\\n\", self->title, who);\n}\n`\n\n  ngAfterViewChecked() {\n    if (!this.highlighted) {\n      this.prismService.highlightAll();\n      this.highlighted = true;\n    }\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    Axi\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      Axi is a data streaming library for Crystal.\\n    </p>\\n\\n    <p>\\n      Example:\\n    </p>\\n\\n    <pre><code class=\\\"language-crystal\\\">{{ axidemo }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/axi\\\">\\n      GitHub\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/axi/blob/master/spec/axi_spec.cr\\\">\\n      Spec file\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    NobleXML\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      NobleXML is an adapted for streaming XML generator/parser library.\\n    </p>\\n\\n    <p>\\n      Generating XML:\\n    </p>\\n\\n    <pre><code class=\\\"language-javascript\\\">{{ nxmldemo1 }}</code></pre>\\n\\n    <p>\\n      Parsing XML:\\n    </p>\\n\\n    <pre><code class=\\\"language-javascript\\\">{{ nxmldemo2 }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/noblexml\\\">\\n      GitHub\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/noblexml/blob/master/test.xml\\\">\\n      test.xml\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    particle_pool\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      particle_pool is a thread pool implementation written in Ruby which also\\n      utilizes fibers for running multiple tasks in a same thread.\\n    </p>\\n\\n    <p>\\n      You can find demo code (also used for testing) below.\\n    </p>    \\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particle_pool\\\">\\n      GitHub\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particle_pool/blob/master/bin/task.rb\\\">\\n      task.rb\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particle_pool/blob/master/bin/test-task.rb\\\">\\n      test-task.rb\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particle_pool/blob/master/bin/test-thread.rb\\\">\\n      test-thread.rb\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particle_pool/blob/master/bin/test-pool.rb\\\">\\n      test-pool.rb\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    tiny-embed\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      tiny-embed is a small utility program which embeds given data into .c files.\\n    </p>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/tiny-embed\\\">\\n      GitHub\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/tiny-embed/blob/master/tiny-embed.txt\\\">\\n      Sample config\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    ParticleMSG\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      ParticleMSG is a json messaging (not a chat!) protocol for various applications inspired by IRC and JSON-RPC.\\n    </p>\\n\\n    <p>\\n      It supports simple hashed password authentication and runs in a single TLS session.\\n    </p>\\n\\n    <p>\\n      It IS NOT designed for transferring big data or anything like that.\\n    </p>\\n\\n    <p>\\n      A sample session might look like this:\\n    </p>\\n\\n    <pre><code class=\\\"language-json\\\">{{ pmsgsession }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particlemsg\\\">\\n      More\\n    </a>\\n    <a mat-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particlemsg_go\\\">\\n      Implementation for Go\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    particletest    \\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      particletest is a testing framework for C++.\\n    </p>\\n\\n    <pre><code class=\\\"language-cpp\\\">{{ ptestdemo }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particletest\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    particledi\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      particledi is a partial implementation of the Context pattern for implementing dependency injection.\\n    </p>\\n\\n    <pre><code class=\\\"language-cpp\\\">{{ pdidemo }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particledi\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    particleini\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      particleini is an .ini parser for C++.\\n    </p>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particleini\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    particlecmd\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      particlecmd is a CLI argument parser for ruby.\\n    </p>\\n\\n    <p>\\n      It supports extracting positionals, flags and options from given string.\\n    </p>\\n\\n    <pre><code class=\\\"language-ruby\\\">{{ pcmddemo }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/particlecmd\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<mat-card class=\\\"site-card\\\">\\n  <mat-card-title>\\n    hake\\n  </mat-card-title>\\n  <mat-card-content>\\n    <p>\\n      hake is a task manager inspired by GNU Make.\\n    </p>\\n\\n    <p>\\n      It supports both Python and <a href=\\\"https://github.com/hylang/hy\\\">Hy</a> hakefiles.\\n    </p>\\n\\n    <pre><code class=\\\"language-python\\\">{{ hakepydemo }}</code></pre>\\n\\n    <pre><code class=\\\"language-clojure\\\">{{ hakehydemo }}</code></pre>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <a mat-raised-button color=\\\"primary\\\" href=\\\"https://github.com/handicraftsman/hake\\\">\\n      GitHub\\n    </a>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, AfterViewChecked } from '@angular/core';\n\nimport { PrismService } from '../prism.service';\n\n@Component({\n  selector: 'site-utilities-project',\n  templateUrl: './utilities-project.component.html',\n  styleUrls: ['./utilities-project.component.scss']\n})\nexport class UtilitiesProjectComponent implements OnInit, AfterViewChecked {\n\n  highlighted: boolean = false;\n\n  axidemo: string =\n`require \"./src/axi\"\n\ns = Axi::Stream(Int32, Int64).new\nputs s.send(2).inspect\ns.transform ->(val : Int32) { val.to_i64 }\ns.on_transform ->(ival : Int32, oval : Int64) { \"do something\"; nil }\nputs s.send(2).inspect\n\ns2 = Axi::Stream(Int32, Int32).new\ns2.transform ->(val : Int32) { val * 2 }\nputs s2.send(2).inspect\n\nclass Foo < Axi::Stream(Int32, Int32)\n  def i_transform(val)\n    return val ** 2\n  end\nend\n\ns3 = Foo.new\nputs s3.send(5).inspect`;\n\n  nxmldemo1: string =\n`const nxml = require('noblexml');\nconst b = new nxml.XMLBuilder();\n\nb\n  .start_document()\n  .write_object({\n    name: 'hello',\n    attrs: {'hello': 'world'},\n    children: [\n      'asdf',\n      {\n        name: 'foo',\n        attrs: {'foo': 'bar'},\n        children: [],\n      },\n    ],\n  })\n  .start_element('foo')\n    .start_element('bar')\n      .write_cdata('Hello, holy ]]> world!')\n    .end_element()\n    .start_element('baz')\n      .start_element('quux')\n  .end_document()\nconsole.log(b.dump());`\n\n  nxmldemo2: string =\n`const fs = require('fs');\nconst nxml = require('./index');\n\nvar xg = new nxml.XMLObjectGetter('stream');\nxg.onelem = () => {\n  console.log(xg.stream[0]);\n  xg.stream.shift();\n}\nxg.onend = () => {\n  console.log('end');\n}\nxg.write(fs.readFileSync('./test.xml'));`;\n\n  pmsgsession: string =\n`C: {\"Type\": \"_register\", \"Data\": {\"Name\": \"pluginName\", \"Key\": \"a sha256-hashed key\"}}\nS: {\"Type\": \"_registered\", \"Data\": {\"Name\": \"pluginName\"}}\nOR\nS: {\"Type\": \"_alreadyRegistered\", \"Data\": {\"Name\": \"pluginName\"}}\nOR\nS: {\"Type\": \"_invalidKey\", \"Data\": {\"Key\": \"a sha256-hashed key\"}}\nOR\nS: {\"Type\": \"_blocked\", \"Data\": {}} // means that server blocks everybody except for core\n...\nS: {\"Type\": \"_ping\", \"Data\": {}}\nC: {\"Type\": \"_pong\", \"Data\": {}}\n...\nC: {\"Type\": \"_message\", \"Data\": {\"To\": \"pluginName\", \"Message\": {\"Type\": \"aMessage\", \"Data\": {\"Some\": \"data\"}}}}\nS: {\"Type\": \"_message\", \"Data\": {\"From\": \"pluginName\", \"Message\": {\"Type\": \"aMessage\", \"Data\": {\"Some\": \"data\"}}}}\n...\nC: {\"Type\": \"_quit\", \"Data\": {}}\nS: {\"Type\": \"_quit\", \"Data\": {\"Reason\": \"Client Quit\"}}`;\n\n  ptestdemo: string =\n`#include \"particletest.hpp\"\n\nclass sample_test : public particletest {\npublic:\n  sample_test() : particletest(\"sample_test\") {\n    ptest_register_test(\"1 + 1 == 2\", &sample_test::one_plus_one_is_two);\n  }\n  virtual ~sample_test() {}\n\n  bool one_plus_one_is_two() {\n    ptest_expect(1 + 1 == 2);\n\n    return true;\n  }\n};\n\nint main(int argc, char** argv) {\n  return particletest::run_all({sample_test()});\n}`;\n\n  pdidemo: string =\n`#include \"particledi.hpp\"\n\n#include <iostream>\n\nclass print_service : public particledi::dependency {\npublic:\n  print_service() {\n    std::cout << \"print_service initialized\" << std::endl;\n  }\n\n  virtual ~print_service() {\n    std::cout << \"print_service destroyed\" << std::endl;\n  }\n\n  void print(std::string msg) {\n    std::cout << msg << std::endl;\n  }\n};\n\nclass a_class {\npublic:\n  a_class(particledi::dm_ptr dm)\n  : ps(dm->get<print_service>())\n  {\n    std::cout << \"a_class initialized\" << std::endl;\n  }\n\n  ~a_class() {\n    std::cout << \"a_class destroyed\" << std::endl;\n  }\n\n  void do_something() {\n    ps->print(\"Hello, World!\");\n  }\n\n  std::shared_ptr<print_service> ps;\n};\n\nint main(int argc, char** argv) {\n  particledi::dm_ptr dm = particledi::dm::create();\n  dm->set<print_service>(new print_service());\n\n  a_class c(dm);\n  c.do_something();\n\n  return 0;\n}`;\n\n  pcmddemo: string =\n`require 'particlecmd'\n\nsample = ParticleCMD::Definition.new 'add' do |d|\n  d.positional 'a', description: 'First value'\n  d.positional 'b', description: 'Second value'\n\n  d.collect_extra\n\n  d.flag 'multiply', description: 'Multiply instead of adding'\n\n  d.option 'divide', argname: 'X', description: 'Divide the result by X'\nend\n\nrequire 'shellwords'\nputs (sample.match ParticleCMD::Info.new Shellwords.split '1 2 3 \\\\\\' 4 5 \"6 7\\' 8\" --multiply --divide=123').inspect\n# #<ParticleCMD::Result:0x000056286c6ab630 @extra=[\"3\", \"'\", \"4\", \"5\", \"6 7' 8\"], @positionals={\"a\"=>\"1\", \"b\"=>\"2\"}, @flags={\"multiply\"=>true}, @options={\"divide\"=>\"123\"}>\n# returns nil if definition and info do not match\n`;\n\n  hakepydemo: string =\n`#!/usr/bin/env python3\n\nfrom hake import start, task, default_task, run_tasks\n\n@default_task\ndef task_default():\n  run_tasks('build', 'install')\n\n@task('build')\ndef task_build():\n  print('Build')\n\n@task('install')\ndef task_install():\n  print('Install')\n\nstart()`;\n\n  hakehydemo: string =\n`#!/usr/bin/env hy\n\n(import [hake [start def-task def-default-task run-tasks]])\n\n(def-default-task (fn []\n  (run-tasks \"build\" \"install\")))\n\n(def-task \"build\" (fn []\n  (print \"Build\")))\n\n(def-task \"install\" (fn []\n  (print \"Install\")))\n\n(start)`;\n\n  constructor(private prismService: PrismService) {}\n  ngOnInit() {}\n\n  ngAfterViewChecked() {\n    if (!this.highlighted) {\n      this.prismService.highlightAll();\n      this.highlighted = true;\n    }\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n  "],"sourceRoot":""}